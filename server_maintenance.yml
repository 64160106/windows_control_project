---
- name: Server Maintenance
  hosts: all

  vars_files:
    - services.yml
    - listcommand.yml

  tasks:
    - name: Set Variable
      set_fact:
        precheckservice: []
        postcheckservice: []
        running: []
        missing: []

    - name: Check variable
      debug:
        var: inventory_hostname

    - name: Pre-check service before Reboot
      include_tasks: "{{ playbook_dir }}/pre_check_services.yaml"
      loop: "{{ services[inventory_hostname] }}"
      loop_control:
        loop_var: service
      ignore_errors: yes
      when: services[inventory_hostname] is defined

    - name: Run command before reboot
      include_tasks: "{{ playbook_dir }}/runcommand.yaml"
      loop: "{{ commands[inventory_hostname] }}"
      loop_control:
        loop_var: command
      ignore_errors: yes
      when: ansible_facts['os_family'] != "Windows"

    - name: Reboot Windows server
      block:
        - name: Reboot Windows server
          win_reboot:
            reboot_timeout: 3600
          when: ansible_facts['os_family'] == "Windows"

        - name: Get timestamp before holding (Windows)
          win_shell: "Get-Date -Format 'yyyy-MM-dd HH:mm:ss'"
          register: timestmp
          when: ansible_facts['os_family'] == "Windows"

        - name: Debug timestamp before holding
          debug:
            msg: "Timestamp before holding: {{ timestmp.stdout }}"
          when: timestmp is defined

        - name: Holding 300 seconds for service to start (Windows)
          win_wait_for:
            timeout: 300
          when: ansible_facts['os_family'] == "Windows"

        - name: Get timestamp after holding (Windows)
          win_shell: "Get-Date -Format 'yyyy-MM-dd HH:mm:ss'"
          register: timestmp_after
          when: ansible_facts['os_family'] == "Windows"

        - name: Debug timestamp after holding
          debug:
            msg: "Timestamp after holding: {{ timestmp_after.stdout }}"
          when: timestmp_after is defined

    - name: Post-check service after Reboot
      include_tasks: "{{ playbook_dir }}/post_check_services.yaml"
      loop: "{{ services[inventory_hostname] }}"
      loop_control:
        loop_var: service
      ignore_errors: yes
      when: services[inventory_hostname] is defined

    - name: Show pre-check services
      debug: var=precheckservice

    - name: Show post-check services
      debug: var=postcheckservice

    - name: Summary
      debug:
        msg: >
          {% if precheckservice == postcheckservice %}
            OA {{ inventory_hostname }} has successfully passed.
          {% else %}
            Not pass:
              - All services: {{ services[inventory_hostname] }}
              - Running services: {{ postcheckservice }}
              - Missing services: {{ missing }}
          {% endif %}
      failed_when: "precheckservice != postcheckservice"
